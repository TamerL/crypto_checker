name: Pipeline

on:
  push:
    branches: [ main ]

jobs:

  slackBuildNotification:
    name: Slack Notification
    runs-on: ubuntu-latest
    steps:
    - name: Slack Notification
      uses: rtCamp/action-slack-notify@v2
      env:
        SLACK_CHANNEL: general
        SLACK_COLOR: ${{ job.status }} # or a specific color like 'good' or '#ff00ff'
        SLACK_ICON: https://avatars.githubusercontent.com/u/1128320?s=48&v=4
        SLACK_MESSAGE: 'Pipeline Build stage started:rocket: <https://github.com/TamerL/crypto_checker/actions|Click here> for details!'
        SLACK_TITLE: 'Pipeline Build stage started'
        SLACK_USERNAME: Tamer
        SLACK_WEBHOOK: ${{ secrets.SLACK_WEBHOOK }}
        
  Build:
    name: 'Build and test the webserver container'
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v3

    - name: Set up Go
      uses: actions/setup-go@v3
      with:
        go-version: 1.18
  
    - name: Build
      run: go build -v ./...

    - name: Test
      run: go test -v ./...
      
  slackPushNotification:
    name: Slack Notification
    runs-on: ubuntu-latest
    steps:
    - name: Slack Notification
      uses: rtCamp/action-slack-notify@v2
      env:
        SLACK_CHANNEL: general
        SLACK_COLOR: ${{ job.status }} # or a specific color like 'good' or '#ff00ff'
        SLACK_ICON: https://avatars.githubusercontent.com/u/1128320?s=48&v=4
        SLACK_MESSAGE: 'Pipeline Push stage started:rocket: <https://github.com/TamerL/crypto_checker/actions|Click here> for details!'
        SLACK_TITLE: 'Pipeline Push stage started'
        SLACK_USERNAME: Tamer
        SLACK_WEBHOOK: ${{ secrets.SLACK_WEBHOOK }}

  Push:
    needs: Build
    name: 'Tag and Push to Docker Hub'
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v3

    - name: Set up Go
      uses: actions/setup-go@v3
      with:
        go-version: 1.18

    - name: Docker Login
      env:
        DOCKER_USER: ${{ secrets.DOCKER_USER }}   
        DOCKER_PASSWORD: ${{ secrets.DOCKER_PASSWORD }}  
      run: |
        docker login -u $DOCKER_USER -p $DOCKER_PASSWORD

    - name: Tag and Build Docker Container
      run: ls && docker build . -t 20002021/crypto_checker:1.0.0
      
    - name: Push to Docker Hub
      run: |
        docker push 20002021/crypto_checker:1.0.0

  slackDeployNotification:
    name: Slack Notification
    runs-on: ubuntu-latest
    steps:
    - name: Slack Notification
      uses: rtCamp/action-slack-notify@v2
      env:
        SLACK_CHANNEL: general
        SLACK_COLOR: ${{ job.status }} # or a specific color like 'good' or '#ff00ff'
        SLACK_ICON: https://avatars.githubusercontent.com/u/1128320?s=48&v=4
        SLACK_MESSAGE: 'Pipeline Deploy stage started:rocket: <https://github.com/TamerL/crypto_checker/actions|Click here> for details!'
        SLACK_TITLE: 'Pipeline Deploy stage started'
        SLACK_USERNAME: Tamer
        SLACK_WEBHOOK: ${{ secrets.SLACK_WEBHOOK }}

  Deploy:
    needs: Push  
    name: 'Deploy to AWS with Terraform'
    runs-on: ubuntu-latest
    environment: production

    # Use the Bash shell regardless whether the GitHub Actions runner is ubuntu-latest, macos-latest, or windows-latest
    defaults:
      run:
        shell: bash

    steps:
    # Checkout the repository to the GitHub Actions runner
    - name: Checkout
      uses: actions/checkout@v3

    # Install the latest version of Terraform CLI and configure the Terraform CLI configuration file with a Terraform Cloud user API token
    - name: Setup Terraform
      uses: hashicorp/setup-terraform@v1
      with:
        cli_config_credentials_token: ${{ secrets.TF_API_TOKEN }}

    # Initialize a new or existing Terraform working directory by creating initial files, loading any remote state, downloading modules, etc.
    - name: Terraform Init
      run: cd terraform && terraform init

    # Checks that all Terraform configuration files adhere to a canonical format
    - name: Terraform Format
      run: terraform fmt -check

    # Generates an execution plan for Terraform
    - name: Terraform Plan
      run: cd terraform && terraform plan -input=false

      # On push to "main", build or change infrastructure according to Terraform configuration files
      # Note: It is recommended to set up a required "strict" status check in your repository for "Terraform Cloud". See the documentation on "strict" required status checks for more information: https://help.github.com/en/github/administering-a-repository/types-of-required-status-checks
    - name: Terraform Apply
      # if: github.ref == 'refs/heads/"main"' && github.event_name == 'push'
      run: cd terraform && terraform apply -auto-approve -input=false
